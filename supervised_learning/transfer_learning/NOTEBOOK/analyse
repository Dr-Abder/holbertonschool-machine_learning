📊 Analyse des résultats :
Meilleure précision atteinte : val_accuracy: 0.8543 (85.43%) à l'epoch 5
❌ Problème : Tu as besoin de 87% minimum, tu es à 85.4%

🔍 Ce qui se passe :
Tu vois que la précision stagne et même diminue légèrement après l'epoch 2-3. C'est du overfitting : le modèle mémorise trop les données d'entraînement.
Signes d'overfitting :

accuracy (train) continue de monter → 89.38%
val_accuracy (test) stagne → 85.43%
val_loss augmente après l'epoch 2

@Dr-Abder ➜ /workspaces/holbertonschool-machine_learning/supervised_learning/transfer_learning (main) $ ./0-transfer.py 
2025-10-16 12:05:41.385664: I external/local_xla/xla/tsl/cuda/cudart_stub.cc:31] Could not find cuda drivers on your machine, GPU will not be used.
2025-10-16 12:05:41.386041: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-10-16 12:05:41.434787: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX512F AVX512_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-10-16 12:05:42.716638: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-10-16 12:05:42.717331: I external/local_xla/xla/tsl/cuda/cudart_stub.cc:31] Could not find cuda drivers on your machine, GPU will not be used.
2025-10-16 12:05:46.578865: E external/local_xla/xla/stream_executor/cuda/cuda_platform.cc:51] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)
Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/mobilenet_v2/mobilenet_v2_weights_tf_dim_ordering_tf_kernels_1.0_96_no_top.h5
9406464/9406464 ━━━━━━━━━━━━━━━━━━━━ 1s 0us/step 
Epoch 1/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 207s 65ms/step - accuracy: 0.8252 - loss: 0.5227 - val_accuracy: 0.8384 - val_loss: 0.4887
Epoch 2/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 198s 63ms/step - accuracy: 0.8634 - loss: 0.4038 - val_accuracy: 0.8537 - val_loss: 0.4336
Epoch 3/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 200s 63ms/step - accuracy: 0.8738 - loss: 0.3715 - val_accuracy: 0.8540 - val_loss: 0.4643
Epoch 4/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 208s 67ms/step - accuracy: 0.8807 - loss: 0.3545 - val_accuracy: 0.8492 - val_loss: 0.4903
Epoch 5/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 205s 65ms/step - accuracy: 0.8840 - loss: 0.3434 - val_accuracy: 0.8543 - val_loss: 0.4662
Epoch 6/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 193s 62ms/step - accuracy: 0.8857 - loss: 0.3377 - val_accuracy: 0.8448 - val_loss: 0.5053
Epoch 7/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 204s 65ms/step - accuracy: 0.8871 - loss: 0.3291 - val_accuracy: 0.8531 - val_loss: 0.4837
Epoch 8/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 195s 62ms/step - accuracy: 0.8895 - loss: 0.3246 - val_accuracy: 0.8487 - val_loss: 0.5028
Epoch 9/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 217s 69ms/step - accuracy: 0.8911 - loss: 0.3202 - val_accuracy: 0.8494 - val_loss: 0.5056
Epoch 10/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 195s 62ms/step - accuracy: 0.8938 - loss: 0.3157 - val_accuracy: 0.8519 - val_loss: 0.5122
WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
@Dr-Abder ➜ /workspaces/holbertonschool-machine_learning/supervised_learning/transfer_learning (main) $ ./0-transfer.py 
2025-10-16 13:00:11.139537: I external/local_xla/xla/tsl/cuda/cudart_stub.cc:31] Could not find cuda drivers on your machine, GPU will not be used.
2025-10-16 13:00:11.139916: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-10-16 13:00:11.186036: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX512F AVX512_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-10-16 13:00:12.582397: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-10-16 13:00:12.583059: I external/local_xla/xla/tsl/cuda/cudart_stub.cc:31] Could not find cuda drivers on your machine, GPU will not be used.
2025-10-16 13:00:15.789299: E external/local_xla/xla/stream_executor/cuda/cuda_platform.cc:51] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)
Epoch 1/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 205s 65ms/step - accuracy: 0.8240 - loss: 0.5216 - val_accuracy: 0.8396 - val_loss: 0.4682
Epoch 2/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 200s 64ms/step - accuracy: 0.8639 - loss: 0.4058 - val_accuracy: 0.8497 - val_loss: 0.4617
Epoch 3/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 186s 60ms/step - accuracy: 0.8741 - loss: 0.3699 - val_accuracy: 0.8357 - val_loss: 0.5148
Epoch 4/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 214s 63ms/step - accuracy: 0.8796 - loss: 0.3579 - val_accuracy: 0.8525 - val_loss: 0.4664
Epoch 5/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 195s 62ms/step - accuracy: 0.8835 - loss: 0.3450 - val_accuracy: 0.8476 - val_loss: 0.4857
Epoch 6/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 200s 64ms/step - accuracy: 0.8866 - loss: 0.3353 - val_accuracy: 0.8483 - val_loss: 0.5077
Epoch 7/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 206s 66ms/step - accuracy: 0.8893 - loss: 0.3298 - val_accuracy: 0.8494 - val_loss: 0.4875
Epoch 8/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 203s 65ms/step - accuracy: 0.8895 - loss: 0.3227 - val_accuracy: 0.8434 - val_loss: 0.5179
Epoch 9/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 202s 65ms/step - accuracy: 0.8918 - loss: 0.3213 - val_accuracy: 0.8495 - val_loss: 0.5237
Epoch 10/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 205s 65ms/step - accuracy: 0.8933 - loss: 0.3176 - val_accuracy: 0.8500 - val_loss: 0.5244
Epoch 1/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 370s 116ms/step - accuracy: 0.8204 - loss: 0.6784 - val_accuracy: 0.8714 - val_loss: 0.4462
Epoch 2/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 352s 113ms/step - accuracy: 0.8981 - loss: 0.3030 - val_accuracy: 0.8914 - val_loss: 0.3940
Epoch 3/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 379s 112ms/step - accuracy: 0.9235 - loss: 0.2238 - val_accuracy: 0.8983 - val_loss: 0.3503
Epoch 4/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 374s 120ms/step - accuracy: 0.9410 - loss: 0.1683 - val_accuracy: 0.8963 - val_loss: 0.3504
Epoch 5/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 377s 121ms/step - accuracy: 0.9534 - loss: 0.1311 - val_accuracy: 0.9023 - val_loss: 0.3718
Epoch 6/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 376s 120ms/step - accuracy: 0.9636 - loss: 0.1080 - val_accuracy: 0.8897 - val_loss: 0.4328
Epoch 7/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 360s 115ms/step - accuracy: 0.9691 - loss: 0.0885 - val_accuracy: 0.9070 - val_loss: 0.3835
Epoch 8/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 368s 118ms/step - accuracy: 0.9730 - loss: 0.0785 - val_accuracy: 0.9024 - val_loss: 0.4386
Epoch 9/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 384s 118ms/step - accuracy: 0.9762 - loss: 0.0700 - val_accuracy: 0.9082 - val_loss: 0.3849
Epoch 10/10
3125/3125 ━━━━━━━━━━━━━━━━━━━━ 368s 118ms/step - accuracy: 0.9779 - loss: 0.0643 - val_accuracy: 0.9099 - val_loss: 0.3902
WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 